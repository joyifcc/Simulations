{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1c1ab807-6b37-4b59-a313-bc541d12347d",
   "metadata": {},
   "source": [
    "# IEOR 174 Assignment 1: Deliverable 3\n",
    "Jacob Quisumbing\n",
    "\n",
    "Joy Zhang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "ec2ed45c-c631-4b08-8369-dceebed7e6f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import math\n",
    "import scipy.stats as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "28cb87df-d04c-429e-ac34-21643b101525",
   "metadata": {},
   "outputs": [],
   "source": [
    "start_time = 0  # 11 pm in min \n",
    "end_time = 120  # 1 pm in min\n",
    "\n",
    "arrival_rate_start = 0.5  # arrival rate at 11\n",
    "arrival_rate_end = 1.0    # arrival rate at 1\n",
    "service_time_mean = 35 / 60  # average service time in minutes\n",
    "\n",
    "num_replications = 100  # number of simulation replications\n",
    "confidence_level = 0.95  # for the confidence interval"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b535ef-4a21-4e69-a243-1891654dd929",
   "metadata": {},
   "source": [
    "From the given arrival rates, we can write the arrival rate as a function of time: \n",
    "$$ \\lambda(t) = 0.5 + \\frac{0.5}{120} t$$\n",
    "Simplifying, we get: \n",
    "$$ \\lambda(t) = 0.5 + \\frac{1}{240} t $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "ac4ec536-47ff-4e5c-885f-5ad5c33651b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_arrivals(start_time, end_time, arrival_rate_start, arrival_rate_end):\n",
    "    arrivals = []\n",
    "    current_time = start_time\n",
    "    while current_time < end_time:\n",
    "        t = arrival_rate_start + (arrival_rate_end - arrival_rate_start) * (current_time - start_time) / (end_time - start_time)\n",
    "       \n",
    "        # Simulate the next arrival\n",
    "        inter_arrival_time = np.random.exponential(1 / t)\n",
    "        current_time += inter_arrival_time\n",
    "        if current_time < end_time:\n",
    "            arrivals.append(current_time)\n",
    "    return arrivals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "c5a74b17-efbf-453e-9aec-e3fa8728fb6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# simulating the service process\n",
    "def simulate_service(service_time_mean):\n",
    "    return np.random.exponential(service_time_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "4c81c8f2-715d-466f-9929-e1153da2ffbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_arrival_rate(t):\n",
    "    return arrival_rate_start + (arrival_rate_end - arrival_rate_start) * t / (end_time - start_time)\n",
    "    \n",
    "def simulate_whole_day():\n",
    "    current_time = start_time\n",
    "    customers_in_system = 0\n",
    "    next_arrival_time = np.random.exponential(1 / get_arrival_rate(0))  # first arrival\n",
    "    next_departure_time = np.inf  # no customers initially, so no departure\n",
    "    \n",
    "    num_customers_at_1pm = 0\n",
    "\n",
    "    while current_time < end_time:\n",
    "        if next_arrival_time < next_departure_time:  # Arrival event\n",
    "            current_time = next_arrival_time\n",
    "            customers_in_system += 1\n",
    "            next_arrival_time += np.random.exponential(1 / get_arrival_rate(current_time))\n",
    "            if customers_in_system == 1:  # If server is idle, start service\n",
    "                next_departure_time = current_time + np.random.exponential(service_time_mean)\n",
    "        else:  # Departure event\n",
    "            current_time = next_departure_time\n",
    "            customers_in_system -= 1\n",
    "            if customers_in_system > 0:\n",
    "                next_departure_time = current_time + np.random.exponential(service_time_mean)\n",
    "            else:\n",
    "                next_departure_time = np.inf\n",
    "\n",
    "        # Record the number of customers at 1PM (time = 120)\n",
    "        if current_time >= end_time and customers_in_system >= 0:\n",
    "            num_customers_at_1pm = customers_in_system\n",
    "\n",
    "    return num_customers_at_1pm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "59266f8a-7b6d-4ade-a033-147742a79c03",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_simulation(num_replications, start_time, end_time, arrival_rate_start, arrival_rate_end, service_time_mean):\n",
    "    waiting_times_2 = []\n",
    "    waiting_times_3 = []\n",
    "\n",
    "    for _ in range(num_replications):\n",
    "        # Reset the state at the start of each replication\n",
    "        arrivals = simulate_arrivals(start_time, end_time, arrival_rate_start, arrival_rate_end)\n",
    "        server_free_time = 0\n",
    "        waiting_times = []\n",
    "\n",
    "        for arrival in arrivals:\n",
    "            service_time = simulate_service(service_time_mean)\n",
    "            if arrival >= server_free_time:\n",
    "                waiting_time = 0\n",
    "                server_free_time = arrival + service_time\n",
    "            else:\n",
    "                waiting_time = server_free_time - arrival\n",
    "                server_free_time += service_time\n",
    "            waiting_times.append(waiting_time)\n",
    "\n",
    "        # Calculate average waiting times for specific time intervals\n",
    "        arrivals_2 = [waiting_times[i] for i, t in enumerate(arrivals) if 105 <= t < 120]  # 12:45 PM to 1 PM\n",
    "        if arrivals_2:\n",
    "            waiting_times_2.append(np.mean(arrivals_2))\n",
    "\n",
    "        arrivals_3 = [waiting_times[i] for i, t in enumerate(arrivals) if 45 <= t < 60]  # 11:45 AM to 12 PM\n",
    "        if arrivals_3:\n",
    "            waiting_times_3.append(np.mean(arrivals_3))\n",
    "\n",
    "    return waiting_times_2, waiting_times_3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "95e0ae70-d62c-4555-b8e5-8fbfc37b0b38",
   "metadata": {},
   "outputs": [],
   "source": [
    "#computing confidence intervals\n",
    "def compute_confidence_interval(data, confidence_level):\n",
    "    mean = np.mean(data)\n",
    "    stderr = st.sem(data)  # standard error of the mean\n",
    "    margin_of_error = stderr * st.t.ppf((1 + confidence_level) / 2, len(data) - 1)\n",
    "    return mean, mean - margin_of_error, mean + margin_of_error\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdd7aea3-ee52-45e3-a256-20bb40705b46",
   "metadata": {},
   "source": [
    "## Part A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "d258e9ce-d740-41fd-82c4-945a1e3b2132",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expectation of the number of Customers at 1pm: 1.42 customers\n",
      "95% confidence interval: (1.42, 1.1871291895984941, 1.6528708104015057)\n"
     ]
    }
   ],
   "source": [
    "all_1pm_cust_counts = []\n",
    "for day in range(num_replications):\n",
    "    count_at_1pm = simulate_whole_day()\n",
    "    all_1pm_cust_counts.append(count_at_1pm)\n",
    "\n",
    "part_a = np.mean(all_1pm_cust_counts)\n",
    "\n",
    "part_a_ci = compute_confidence_interval(all_1pm_cust_counts, confidence_level)\n",
    "\n",
    "print(f\"Expectation of the number of Customers at 1pm: {part_a} customers\") \n",
    "print(f\"95% confidence interval: {part_a_ci}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf0980b4-6a94-4b2b-b62a-d31d0062196f",
   "metadata": {},
   "source": [
    "## Part B and C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "406392cc-d900-468f-b8e0-7d7bfab72d82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Avg waiting time for 12:45 to 1: Mean = 0.64 minutes, 95% CI = [0.49, 0.79]\n",
      "Avg waiting time for 11:45 to 12:00: Mean = 0.36 minutes, 95% CI = [0.28, 0.44]\n"
     ]
    }
   ],
   "source": [
    "#running simulation\n",
    "waiting_times_2, waiting_times_3 = run_simulation(\n",
    "    num_replications, start_time, end_time, arrival_rate_start, arrival_rate_end, service_time_mean)\n",
    "\n",
    "\n",
    "#mean and confidence intervals for each part\n",
    "mean_waiting_2, ci_low_waiting_2, ci_high_waiting_2 = compute_confidence_interval(waiting_times_2, confidence_level)\n",
    "mean_waiting_3, ci_low_waiting_3, ci_high_waiting_3 = compute_confidence_interval(waiting_times_3, confidence_level)\n",
    "\n",
    "print(f\"Avg waiting time for 12:45 to 1: Mean = {mean_waiting_2:.2f} minutes, 95% CI = [{ci_low_waiting_2:.2f}, {ci_high_waiting_2:.2f}]\")\n",
    "print(f\"Avg waiting time for 11:45 to 12:00: Mean = {mean_waiting_3:.2f} minutes, 95% CI = [{ci_low_waiting_3:.2f}, {ci_high_waiting_3:.2f}]\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
